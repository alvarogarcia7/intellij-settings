<templateSet group="user">
  <template name="tes" value="    @Test public void $name$(){&#10;    &#10;    org.hamcrest.MatcherAssert.assertThat($act$, org.hamcrest.Matchers.is($expected$));&#10;    }" description="state test" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="act" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="expected" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_DECLARATION" value="true" />
      <option name="JAVA_COMMENT" value="true" />
      <option name="JAVA_STRING" value="true" />
      <option name="COMPLETION" value="true" />
    </context>
  </template>
  <template name="tei" value="    @Test public void $name$(){&#10;    &#10;&#9;    sut.$act$();&#10;        org.mockito.Mockito.verify($collaborator$).$someMethod$();&#10;    }" description="interaction test" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="act" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="collaborator" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="someMethod" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_DECLARATION" value="true" />
      <option name="JAVA_COMMENT" value="true" />
      <option name="JAVA_STRING" value="true" />
      <option name="COMPLETION" value="true" />
    </context>
  </template>
  <template name="befj" value="@org.junit.Before&#10;public void setUp(){&#10;&#9;context = new org.jmock.Mockery();&#10;}" description="insert a before method for junit, using the mockery context" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <context>
      <option name="JAVA_CODE" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_DECLARATION" value="true" />
      <option name="JAVA_COMMENT" value="true" />
      <option name="JAVA_STRING" value="true" />
      <option name="COMPLETION" value="true" />
    </context>
  </template>
  <template name="fore" value="for($object$ current : $origin$){&#10;&#10;}" description="creates a foreach-style for" toReformat="true" toShortenFQNames="true">
    <variable name="object" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="origin" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="teij" value="    @Test public void $name$(){&#10;&#9;    &#10;&#9;    context.checking(new Expectations(){{&#10;&#9;&#9;    &#10;&#9;    }}); &#10;    &#10;&#9;    sut.$act$();&#10;&#9;    &#10;&#9;    context.assertIsSatisfied();&#10;    }" description="interaction test with jmock" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="act" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_DECLARATION" value="true" />
      <option name="JAVA_COMMENT" value="true" />
      <option name="JAVA_STRING" value="true" />
      <option name="COMPLETION" value="true" />
    </context>
  </template>
  <template name="mok" value="final $Class$ $name$ = context.mock($Class$.class);" description="jmock's testdouble::mock" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <variable name="Class" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_STATEMENT" value="true" />
      <option name="JAVA_EXPRESSION" value="false" />
      <option name="JAVA_DECLARATION" value="true" />
      <option name="JAVA_COMMENT" value="false" />
      <option name="JAVA_STRING" value="false" />
      <option name="COMPLETION" value="true" />
    </context>
  </template>
</templateSet>